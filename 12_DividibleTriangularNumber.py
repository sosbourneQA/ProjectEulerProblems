# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?


# figures out the Nth triangle number where the limit in the for loop is N+1
def tri():
    total = 0

    for i in range(1, 12373):
        total += i
        print(total)


# figures out whether the triangle number of each iteration has 500 dividers
# or more but does not function correctly because when counting from triangle
# number 1 it results in the answer of 1596

def compute():

    dividers = 0
    tri_num = 0

    for i in range(1, 1000000000):
        tri_num += i
        for x in range(1, 76576501):
              if x < tri_num:
                  if tri_num % x == 0:
                      dividers += 1
                      print(dividers)
                      if dividers > 500:
                          return tri_num
              else: break

print(compute())


# print(tri())